{"version":3,"sources":["components/Home/App.tsx","apis/textToSpeech.ts","constants/value.ts","reportWebVitals.ts","index.tsx"],"names":["VALUE_BUTTON","axios","require","qs","handlePostTextToSpeech","input","speaker","speech","a","console","log","result","error_code","data","url","stringify","config","method","headers","then","response","catch","error","voidData","speechRead","TextArea","Input","Option","Select","Demo","useState","value","setValue","maxText","voidPerson","setVoidPerson","setSpeech","STOP","textButton","setTextButton","source","setSource","ref","useRef","callApi","parseInt","toString","useEffect","current","play","pause","className","onChange","e","target","split","length","placeholder","autoSize","maxRows","minRows","rows","controls","id","src","defaultValue","parseFloat","handleVoidChange","map","voidRead","children","handleSpeechChange","icon","StopOutlined","type","disabled","onClick","paused","CONTINUE","checkAudioIsPlaying","AudioOutlined","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yJAeKA,E,0ECdDC,EAAQC,EAAQ,IAChBC,EAAKD,EAAQ,KAEJE,EAAsB,uCAAG,WAAOC,EAAeC,EAAiBC,GAAvC,mBAAAC,EAAA,6DACpCC,QAAQC,IAAI,MAAOL,EAAOC,EAASC,GAE/BI,EAAkB,CACpBC,YAAa,EACbC,KAAM,CAAEC,IAAK,KAGXD,EAAOV,EAAGY,UAAU,CACtB,MAAQ,GAAR,OAAYV,GACZ,WAAa,GAAb,OAAiBC,GACjB,MAAQ,GAAR,OAAYC,KAEVS,EAAS,CACXC,OAAQ,OACRH,IAAK,wCACLI,QAAS,CACP,OAAU,mCACV,eAAgB,qCAElBL,KAAMA,GApB4B,SAuB9BZ,EAAMe,GACTG,MAAK,SAAUC,GACdX,QAAQC,IAAI,SAASU,EAASP,MAC9BF,EAAOE,KAAKC,IAAMM,EAASP,KAAKA,KAAKC,IACrCH,EAAOC,WAAaQ,EAASP,KAAKD,cAGnCS,OAAM,SAAUC,GACfb,QAAQC,IAAIY,MA/BoB,gCAkC7BX,GAlC6B,2CAAH,0DCJtBY,EAAW,CAAC,CAAC,6BAAc,GAAI,CAAC,wBAAc,GAAI,CAAC,yBAAe,GAAI,CAAC,oBAAe,IACtFC,EAAa,CAAC,GAAK,EAAK,K,6DFW7BC,EAAaC,IAAbD,SACAE,EAAWC,IAAXD,Q,SAEH3B,K,8BAAAA,E,kBAAAA,M,KAIL,IAyIe6B,EAzIQ,WAAO,IAAD,EACDC,mBAAiB,IADhB,mBACpBC,EADoB,KACbC,EADa,OAETF,mBAAiB,KAA5BG,EAFoB,sBAISH,mBAAiB,GAJ1B,mBAIpBI,EAJoB,KAIRC,EAJQ,OAKCL,mBAAiB,GALlB,mBAKpBvB,EALoB,KAKZ6B,EALY,OAOSN,mBAAiB9B,EAAaqC,MAPvC,mBAOpBC,EAPoB,KAORC,EAPQ,OASCT,mBAAiB,IATlB,mBASpBU,EAToB,KASZC,EATY,KAUrBC,EAAMC,iBAAgC,MAyBtCC,EAAO,uCAAG,4BAAApC,EAAA,6DACd+B,EAAcvC,EAAaqC,MAC3BI,EAAU,IACVhC,QAAQC,IAAI,UAAWqB,EAAOG,EAAY3B,GAH5B,SAKSH,EAAuB2B,EAAOG,EAAY3B,GALnD,OAKRa,EALQ,OAMdX,QAAQC,IAAI,MAAOU,GAC+B,IAA9CyB,SAAQ,OAACzB,QAAD,IAACA,OAAD,EAACA,EAAUR,WAAWkC,cAChCrC,QAAQC,IAAI,UAEZ+B,EAAUrB,EAASP,KAAKC,MAVZ,2CAAH,qDAyBb,OAXAiC,qBAAU,WACK,IAAD,EAIL,EAJHP,GACF/B,QAAQC,IAAI,WAAY8B,GAExB,UAAAE,EAAIM,eAAJ,SAAaC,SAEbxC,QAAQC,IAAI,eAEZ,UAAAgC,EAAIM,eAAJ,SAAaE,WAEd,CAACV,IAEF,sBAAKW,UAAU,iBAAf,UACE,cAAC1B,EAAD,CACEM,MAAOA,EACPqB,SAAU,SAACC,GAAD,OArDC,SAAC,GAA0D,IAA9CtB,EAA6C,EAAvDuB,OAAUvB,MAExBA,EAAMwB,MAAM,KAAKC,OAASvB,GAE9BD,EAASD,GAiDYqB,CAASC,IAC1BI,YAAY,sBACZC,SAAU,CAAEC,QAAS,EAAGC,QAAS,GACjCC,KAAM,IAER,uBACEC,UAAQ,EACRpB,IAAKA,EACLqB,GAAG,QACHC,IAAKxB,EACLW,UAAU,UAEZ,sBAAKA,UAAU,eAAf,UAEE,cAAC,IAAD,CACEc,aAAc1C,EAAS,GAAG,GAC1B4B,UAAU,eACVC,SAAU,SAACC,GAAD,OAhEO,SAACtB,GACxBI,EAAc+B,WAAWnC,IA+DFoC,CAAiBd,EAAEP,aAHtC,SAKGvB,EAAS6C,KAAI,SAACC,GAAD,OACZ,cAAC1C,EAAD,CACEI,MAAOsC,EAAS,GAEhBC,SAAUD,EAAS,IADdA,EAAS,SAMpB,cAAC,IAAD,CACEJ,aAAczC,EAAW,GACzB2B,UAAU,eACVC,SAAU,SAACC,GAAD,OA1ES,SAACtB,GAC1BK,EAAUL,GAyEawC,CAAmBlB,IAHtC,SAKG7B,EAAW4C,KAAI,SAAC7D,GAAD,OACd,cAACoB,EAAD,CAAQI,MAAOxB,EAAqB+D,SAAU/D,GAAlBA,QAIhC,cAAC,IAAD,CACE4C,UAAU,eACVqB,KAAM,cAACC,EAAA,EAAD,IACNC,KAAK,QACLC,SAA4B,IAAlBnC,EAAOgB,QAAiC,IAAjBzB,EAAMyB,OACvCoB,QAAS,kBAlFW,WAAO,IAAD,EAIzB,EAHmB,GAAtB,UAAClC,EAAIM,eAAL,aAAC,EAAa6B,SAIhBtC,EAAcvC,EAAaqC,MAC3B,UAAAK,EAAIM,eAAJ,SAAaC,SAJb,UAAAP,EAAIM,eAAJ,SAAaE,QACbX,EAAcvC,EAAa8E,WA+ERC,IALjB,SAOGzC,IAGH,cAAC,IAAD,CACEa,UAAU,eACVuB,KAAK,UACLF,KAAM,cAACQ,EAAA,EAAD,IACNL,SAA2B,IAAjB5C,EAAMyB,OAChBoB,QAAS,kBAAMhC,KALjB,kCGrHOqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBhE,MAAK,YAAkD,IAA/CiE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.d2b451f2.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { useRef, useState } from 'react'\nimport { handlePostTextToSpeech } from '../../apis/textToSpeech'\nimport { voidData, speechRead } from '../../constants/value'\nimport { Input, Select, Button } from 'antd'\nimport {\n  AudioOutlined,\n  DownloadOutlined,\n  StopOutlined,\n} from '@ant-design/icons'\nimport './App.scss'\n\nconst { TextArea } = Input\nconst { Option } = Select\n\nenum VALUE_BUTTON {\n  CONTINUE = 'Tiếp tục',\n  STOP = 'Dừng',\n}\nconst Demo: React.FC = () => {\n  const [value, setValue] = useState<string>('')\n  const [maxText] = useState<number>(2000)\n\n  const [voidPerson, setVoidPerson] = useState<number>(1)\n  const [speech, setSpeech] = useState<number>(1.0)\n\n  const [textButton, setTextButton] = useState<string>(VALUE_BUTTON.STOP)\n\n  const [source, setSource] = useState<string>('')\n  const ref = useRef<HTMLAudioElement | null>(null)\n  const onChange = ({ target: { value } }: { target: { value: string } }) => {\n    // Check max Word\n    if (value.split(' ').length > maxText) return\n\n    setValue(value)\n  }\n  const handleVoidChange = (value: string) => {\n    setVoidPerson(parseFloat(value))\n  }\n\n  const handleSpeechChange = (value: number) => {\n    setSpeech(value)\n  }\n\n  const checkAudioIsPlaying = () => {\n    if (!ref.current?.paused) {\n      ref.current?.pause()\n      setTextButton(VALUE_BUTTON.CONTINUE)\n    } else {\n      setTextButton(VALUE_BUTTON.STOP)\n      ref.current?.play()\n    }\n  }\n\n  const callApi = async () => {\n    setTextButton(VALUE_BUTTON.STOP)\n    setSource('')\n    console.log('comm-- ', value, voidPerson, speech)\n\n    const response = await handlePostTextToSpeech(value, voidPerson, speech)\n    console.log('res', response)\n    if (parseInt(response?.error_code.toString()) === 0) {\n      console.log('set ok')\n\n      setSource(response.data.url)\n    }\n  }\n\n  useEffect(() => {\n    if (source) {\n      console.log('speak ok', source)\n\n      ref.current?.play()\n    } else {\n      console.log('speak pause')\n\n      ref.current?.pause()\n    }\n  }, [source])\n  return (\n    <div className=\"main-container\">\n      <TextArea\n        value={value}\n        onChange={(e) => onChange(e)}\n        placeholder=\"Controlled autosize\"\n        autoSize={{ maxRows: 7, minRows: 7 }}\n        rows={7}\n      />\n      <audio\n        controls\n        ref={ref}\n        id=\"audio\"\n        src={source}\n        className=\"mt-10\"\n      ></audio>\n      <div className=\"button-group\">\n        {/* Select Void */}\n        <Select\n          defaultValue={voidData[0][0]}\n          className=\"select-style\"\n          onChange={(e) => handleVoidChange(e.toString())}\n        >\n          {voidData.map((voidRead) => (\n            <Option\n              value={voidRead[1]}\n              key={voidRead[0]}\n              children={voidRead[0]}\n            ></Option>\n          ))}\n        </Select>\n        {/* Select Speech Read */}\n        <Select\n          defaultValue={speechRead[1]}\n          className=\"select-style\"\n          onChange={(e) => handleSpeechChange(e)}\n        >\n          {speechRead.map((speech) => (\n            <Option value={speech} key={speech} children={speech}></Option>\n          ))}\n        </Select>\n        {/* Button Stop */}\n        <Button\n          className=\"button-style\"\n          icon={<StopOutlined />}\n          type=\"ghost\"\n          disabled={source.length === 0 || value.length === 0 ? true : false}\n          onClick={() => checkAudioIsPlaying()}\n        >\n          {textButton}\n        </Button>\n        {/* Button Start */}\n        <Button\n          className=\"button-style\"\n          type=\"primary\"\n          icon={<AudioOutlined />}\n          disabled={value.length === 0 ? true : false}\n          onClick={() => callApi()}\n        >\n          Đọc\n        </Button>\n        {/* Button Download */}\n        {/* <Button\n          icon={<DownloadOutlined />}\n          type=\"dashed\"\n          danger\n          block\n          className=\"mt-10\"\n          onClick={() => downloadFile()}\n        >\n          DownLoad\n        </Button> */}\n      </div>\n    </div>\n  )\n}\n\nexport default Demo\n","import { TypeHeader, typeRes } from \"../hook/type\";\nvar axios = require(\"axios\");\nvar qs = require(\"qs\");\n\nexport const handlePostTextToSpeech = async (input: string, speaker: number, speech: number) => {\n  console.log(\"par\", input, speaker, speech);\n\n  var result: typeRes = {\n    error_code: -1,\n    data: { url: \"\" },\n  };\n\n  var data = qs.stringify({\n    \"input\": `${input}`,\n    \"speaker_id\": `${speaker}`,\n    \"speed\": `${speech}`,\n  });\n  var config = {\n    method: \"post\",\n    url: \"https://api.zalo.ai/v1/tts/synthesize\",\n    headers: {\n      \"apikey\": \"s6GopJmGpsTiGyHiUYm252RsgH960r8Y\",\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    data: data,\n  };\n\n  await axios(config)\n    .then(function (response: any) {\n      console.log(' data ',response.data);\n      result.data.url = response.data.data.url;\n      result.error_code = response.data.error_code;\n      \n    })\n    .catch(function (error: Error) {\n      console.log(error);\n    });\n\n  return result;\n};\n","export const voidData = [[\"Nữ miền Bắc\",1], [\"Nữ miền Nam\",2], [\"Nam miền Bắc\",3], [\"Nam miền Nam\",4]];\nexport const speechRead = [0.8, 1.0, 1.2];\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/Home/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}