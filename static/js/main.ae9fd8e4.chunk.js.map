{"version":3,"sources":["apis/textToSpeech.ts","constants/value.ts","components/Home/App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","require","qs","handlePostTextToSpeech","input","speaker","speech","a","console","log","result","error_code","data","url","stringify","config","method","headers","then","response","catch","error","voidData","speechRead","TextArea","Input","Option","Select","Demo","useState","value","setValue","maxText","voidPerson","setVoidPerson","setSpeech","source","setSource","ref","useRef","callApi","current","play","className","onPaste","e","document","execCommand","clipboardData","getData","onChange","target","split","length","placeholder","autoSize","maxRows","minRows","rows","defaultValue","parseFloat","handleVoidChange","toString","map","voidRead","children","handleSpeechChange","icon","StopOutlined","type","disabled","onClick","paused","pause","checkAudioIsPlaying","AudioOutlined","id","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ae9fd8e4.chunk.js","sourcesContent":["import { TypeHeader, typeRes } from \"../hook/type\";\nvar axios = require(\"axios\");\nvar qs = require(\"qs\");\n\nexport const handlePostTextToSpeech = async (input: string, speaker: number, speech: number) => {\n  console.log(\"par\", input, speaker, speech);\n\n  var result: typeRes = {\n    error_code: -1,\n    data: { url: \"\" },\n  };\n\n  var data = qs.stringify({\n    \"input\": `${input}`,\n    \"speaker_id\": `${speaker}`,\n    \"speed\": `${speech}`,\n  });\n  var config = {\n    method: \"post\",\n    url: \"https://api.zalo.ai/v1/tts/synthesize\",\n    headers: {\n      \"apikey\": \"s6GopJmGpsTiGyHiUYm252RsgH960r8Y\",\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    data: data,\n  };\n\n  await axios(config)\n    .then(function (response: any) {\n      console.log(' data ',response.data);\n      result.data.url = response.data.data.url;\n      result.error_code = response.data.error_code;\n      \n    })\n    .catch(function (error: Error) {\n      console.log(error);\n    });\n\n  return result;\n};\n","export const voidData = [[\"Nữ miền Bắc\",1], [\"Nữ miền Nam\",2], [\"Nam miền Bắc\",3], [\"Nam miền Nam\",4]];\nexport const speechRead = [0.8, 1.0, 1.2];\n","import React from 'react'\nimport { useRef, useState } from 'react'\nimport { handlePostTextToSpeech } from '../../apis/textToSpeech'\nimport { voidData, speechRead } from '../../constants/value'\nimport { Input, Select, Button } from 'antd'\nimport { AudioOutlined, StopOutlined } from '@ant-design/icons'\nimport './App.scss'\n\nconst { TextArea } = Input\nconst { Option } = Select\n\nconst Demo: React.FC = () => {\n  const [value, setValue] = useState<string>('')\n  const [maxText] = useState<number>(20)\n\n  const [voidPerson, setVoidPerson] = useState<number>(1)\n  const [speech, setSpeech] = useState<number>(1.0)\n\n  const [source, setSource] = useState<string>('')\n  const ref = useRef<HTMLAudioElement | null>(null)\n  const onChange = ({ target: { value } }: { target: { value: string } }) => {\n    // Check max Word\n    if (value.split(' ').length > maxText) return\n\n    setValue(value)\n  }\n  const handleVoidChange = (value: string) => {\n    setVoidPerson(parseFloat(value))\n  }\n\n  const handleSpeechChange = (value: number) => {\n    setSpeech(value)\n  }\n\n  const checkAudioIsPlaying = () => {\n    if (!ref.current?.paused) {\n      ref.current?.pause()\n    } else {\n      ref.current?.play()\n    }\n  }\n\n  const callApi = async () => {\n    console.log('comm-- ', value, voidPerson, speech)\n\n    const response = await handlePostTextToSpeech(value, voidPerson, speech)\n    console.log('res', response)\n    if (response && response?.error_code === 0) {\n      setSource(response.data.url)\n      ref.current?.play()\n    }\n  }\n\n  return (\n    <div className=\"main-container\">\n      <TextArea\n        value={value}\n        onPaste={(e) => {\n          document.execCommand('paste')\n          setValue(value + e.clipboardData.getData('Text'))\n          // console.log('vv', e.target);\n        }}\n        onChange={(e) => onChange(e)}\n        placeholder=\"Controlled autosize\"\n        autoSize={{ maxRows: 7, minRows: 7 }}\n        rows={7}\n      />\n      <div className=\"button-group\">\n        {/* Select Void */}\n        <Select\n          defaultValue={voidData[0][0]}\n          className=\"select-style\"\n          onChange={(e) => handleVoidChange(e.toString())}\n        >\n          {voidData.map((voidRead) => (\n            <Option\n              value={voidRead[1]}\n              key={voidRead[0]}\n              children={voidRead[0]}\n            ></Option>\n          ))}\n        </Select>\n        {/* Select Speech Read */}\n        <Select\n          defaultValue={speechRead[1]}\n          className=\"select-style\"\n          onChange={(e) => handleSpeechChange(e)}\n        >\n          {speechRead.map((speech) => (\n            <Option value={speech} key={speech} children={speech}></Option>\n          ))}\n        </Select>\n        {/* Button Stop */}\n        <Button\n          className=\"button-style\"\n          icon={<StopOutlined />}\n          type=\"ghost\"\n          disabled={source.length === 0 ? true : false}\n          onClick={() => checkAudioIsPlaying()}\n        >\n          {ref.current?.paused ? 'Dừng' : 'Tiếp tục'}\n        </Button>\n        {/* Button Start */}\n        <Button\n          className=\"button-style\"\n          type=\"primary\"\n          icon={<AudioOutlined />}\n          disabled={value.length === 0 ? true : false}\n          onClick={() => callApi()}\n        >\n          Đọc\n        </Button>\n      </div>\n      <audio ref={ref} id=\"audio\" src={source}></audio>\n    </div>\n  )\n}\n\nexport default Demo\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/Home/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}